export function attack(attacker, defender) {
  // 1. –í—ã—á–∏—Å–ª—è–µ–º —à–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è
  const hitChance = Math.min(
    0.9, // –º–∞–∫—Å–∏–º—É–º 90%
    Math.max(0.1, 0.5 + (attacker.dexterity - defender.dexterity) * 0.05)
  );

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–ª –ª–∏ –∞—Ç–∞–∫—É—é—â–∏–π
  if (Math.random() > hitChance) {
    console.log(`${attacker.name ?? "–ü–µ—Ä—Å–æ–Ω–∞–∂"} –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è!`);
    return;
  }

  // 3. –£—Ä–æ–Ω –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∏–ª—ã
  const baseDamage = attacker.strength;
  const weaponBonus = attacker.weapon?.damage ?? 0;
  const totalDamage = baseDamage + weaponBonus;

  // 4. –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É
  defender.takeDamage(totalDamage);
  console.log(
    `${attacker.name ?? "–ê—Ç–∞–∫—É—é—â–∏–π"} –ø–æ–ø–∞–ª –ø–æ ${
      defender.name ?? "—Ü–µ–ª–∏"
    } –Ω–∞ ${totalDamage} —É—Ä–æ–Ω–∞!`
  );

  // 5. –ï—Å–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ —É–º–µ—Ä
  if (defender.currentHealth <= 0) {
    console.log(`${defender.name ?? "–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫"} –ø–æ–≤–µ—Ä–∂–µ–Ω!`);

    // –ø–æ–¥–±–∏—Ä–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
    const loot = Math.floor(Math.random() * 10) + 1; // –ª—É—Ç –æ—Ç 1 –¥–æ 10 –º–æ–Ω–µ—Ç

    if (loot > 0) {
      attacker.gold = (attacker.gold ?? 0) + loot;
      console.log(`üí∞ ${attacker.name} –ø–æ–ª—É—á–∏–ª ${loot} –∑–æ–ª–æ—Ç–∞!`);
    }
  }
}
// –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–º —Ñ–∞–π–ª–µ:

// import { createCharacter } from "./character.js";
// import { createEnemy } from "./enemy.js";
// import { attack } from "./combat.js";

// const hero = createCharacter({
//   name: "–ì–µ—Ä–æ–π",
//   strength: 5,
//   dexterity: 6,
// });

// const enemy = createEnemy({
//   name: "–ó–æ–º–±–∏",
//   strength: 3,
//   dexterity: 2,
// });

// attack(hero, enemy);  // –ì–µ—Ä–æ–π –∞—Ç–∞–∫—É–µ—Ç –ó–æ–º–±–∏
// attack(enemy, hero);  // –ó–æ–º–±–∏ –∞—Ç–∞–∫—É–µ—Ç –ì–µ—Ä–æ—è
