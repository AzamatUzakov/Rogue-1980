export function createEnemy(options) {
  const enemy = {
    name: options.name ?? "Enemy",
    type: options.type ?? "Zombie",
    maxHealth: options.maxHealth ?? 100,
    currentHealth: options.currentHealth ?? options.maxHealth ?? 100,
    strength: options.strength ?? 2,
    dexterity: options.dexterity ?? 2,
    hostility: options.hostility ?? true, // –≤—Ä–∞–∂–¥–µ–±–Ω–æ—Å—Ç—å
    agroRange: options.agroRange ?? 3, // —Ä–∞–¥–∏—É—Å, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Ä–∞–≥ –∞–≥—Ä–∏—Ç—Å—è
    position: options.position ?? { x: 0, y: 0 }, // –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ
    movePattern: options.movePattern ?? "idle", // idle, patrol, chase

    // --- –º–µ—Ç–æ–¥: –ø–æ–∫–∞–∑–∞—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ ---
    showHealth() {
      console.log(`${this.name} HP: ${this.currentHealth}/${this.maxHealth}`);
    },

    // --- –º–µ—Ç–æ–¥: –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–Ω ---
    takeDamage(amount) {
      this.currentHealth -= amount;
      console.log(`${this.name} –ø–æ–ª—É—á–∏–ª —É—Ä–æ–Ω: -${amount} HP`);

      if (this.currentHealth <= 0) {
        this.currentHealth = 0;
        this.die();
      }

      this.showHealth();
    },

    // --- –º–µ—Ç–æ–¥: —Å–º–µ—Ä—Ç—å ---
    die() {
      console.log(`üíÄ ${this.name} –ø–æ–±–µ–∂–¥—ë–Ω!`);
    },

    // --- –º–µ—Ç–æ–¥: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≥—Ä–æ-–∑–æ–Ω—ã ---
    checkAggro(playerPosition) {
      const dx = Math.abs(playerPosition.x - this.position.x);
      const dy = Math.abs(playerPosition.y - this.position.y);
      const distance = Math.sqrt(dx * dx + dy * dy);

      if (this.hostility && distance <= this.agroRange) {
        console.log(`${this.name} –∑–∞–º–µ—Ç–∏–ª –∏–≥—Ä–æ–∫–∞!`);
        this.movePattern = "chase";
      }
    },

    // --- –º–µ—Ç–æ–¥: –¥–≤–∏–∂–µ–Ω–∏–µ ---
    move() {
      if (this.movePattern === "idle") return;

      if (this.movePattern === "patrol") {
        const dir = Math.random() < 0.5 ? -1 : 1;
        this.position.x += dir;
        console.log(`${this.name} –ø–∞—Ç—Ä—É–ª–∏—Ä—É–µ—Ç (${this.position.x}, ${this.position.y})`);
      }

      if (this.movePattern === "chase") {
        console.log(`${this.name} –±–µ–∂–∏—Ç –∫ –∏–≥—Ä–æ–∫—É!`);
      }
    },
  };

  return enemy;
}

// EXAMPLES

// üßü –ó–æ–º–±–∏ ‚Äî –º–µ–¥–ª–µ–Ω–Ω—ã–π, –Ω–æ –∂–∏–≤—É—á–∏–π
const zombie = createEnemy({
  name: "Zombie",
  type: "Zombie",
  maxHealth: 80,
  strength: 3,
  dexterity: 2,
  agroRange: 2,
  movePattern: "patrol",
});

// ü¶á –í–∞–º–ø–∏—Ä ‚Äî –±—ã—Å—Ç—Ä—ã–π, –ø–µ—Ä–≤—ã–π —É–¥–∞—Ä –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–º–∞—Ö
const vampire = createEnemy({
  name: "Vampire",
  type: "Vampire",
  maxHealth: 60,
  strength: 4,
  dexterity: 7,
  agroRange: 4,
});

// üëª –ü—Ä–∏–∑—Ä–∞–∫ ‚Äî —Å–ª–∞–±—ã–π, –Ω–æ –ø–æ—á—Ç–∏ –Ω–µ—É—è–∑–≤–∏–º—ã–π
const ghost = createEnemy({
  name: "Ghost",
  type: "Ghost",
  maxHealth: 40,
  strength: 2,
  dexterity: 8,
  hostility: true,
});

// üëπ –û–≥ ‚Äî —Å–∏–ª—å–Ω—ã–π, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω—ã–π
const ogre = createEnemy({
  name: "Ogre",
  type: "Ogre",
  maxHealth: 120,
  strength: 8,
  dexterity: 1,
  agroRange: 3,
});

// üêç –ó–º–µ–π-–º–∞–≥ ‚Äî –ª–æ–≤–∫–∏–π –∏ —Ö–∏—Ç—Ä—ã–π
const snakeMage = createEnemy({
  name: "SnakeMage",
  type: "SnakeMage",
  maxHealth: 50,
  strength: 5,
  dexterity: 6,
  agroRange: 5,
});
